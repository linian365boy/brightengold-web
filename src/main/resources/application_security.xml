<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    										http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util-3.1.xsd">

  	<global-method-security secured-annotations="enabled" jsr250-annotations="enabled"
  		access-decision-manager-ref="aclDecisionManager" >
  	</global-method-security>
    <http pattern="/resources/**" security="none"/>
    <http pattern="/admin/login*" security="none"/>
    <http pattern="/views/index.jsp*" security="none"/>
    <http pattern="/accessDenied*" security="none"/>

    <http auto-config="false" request-matcher="regex" use-expressions="true">
    	<access-denied-handler error-page="/accessDenied.action"/>
    	<remember-me key="act_spring"/>
    	<form-login login-page="/admin/login" default-target-url="/admin/"
    		authentication-failure-url="/admin/login"/>
    	<!-- <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/> -->
    	<!-- 会话管理配置 -->
   		<session-management session-authentication-error-url="/admin/login" session-fixation-protection="migrateSession">
   			<concurrency-control expired-url="/admin/login" max-sessions="1" error-if-maximum-exceeded="false"/>
   		</session-management>
   		<logout logout-url="/admin/logout" logout-success-url="/admin/login" delete-cookies="JSESSIONID" invalidate-session="true"/>
    </http>

		<beans:bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
			<filter-chain-map request-matcher="ant">
		     <filter-chain pattern="/admin/**" filters="
		           securityContextPersistenceFilter,
		           usernamePasswordProcessingFilter,
		           anonymousProcessingFilter,
		           exceptionTranslationFilter,
		           filterSecurityInterceptor"/>
		  </filter-chain-map>
		</beans:bean>
		
	<beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter" id="expressionVoter">
		<beans:property name="expressionHandler" ref="customExpressionHandler"/>
	</beans:bean>
	<beans:bean class="cn.rainier.nian.custom.CustomWebSecurityExpressionHandler" id="customExpressionHandler"/>
		<beans:bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>

		<beans:bean id="usernamePasswordProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
	  	<beans:property name="authenticationManager" ref="autheticationManager"/>
	  	<beans:property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
		</beans:bean>
		<beans:bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/admin/login"/>
	</beans:bean>
		<beans:bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<beans:property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
		<!-- randomly generated key -->
		<beans:property name="key" value="BF93JFJ091N00Q7HF"/>
	</beans:bean>

	<beans:bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
	  <beans:property name="authenticationEntryPoint" ref="authenticationEntryPoint"/>
	  <beans:property name="accessDeniedHandler" ref="accessDeniedHandler"/>
	</beans:bean>

	<beans:bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
	  <beans:property name="errorPage" value="/accessDenied.action"/>
	</beans:bean>
		<beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	  <beans:property name="loginFormUrl" value="/admin/login"/>
	</beans:bean>


	<!-- 引入auth_core.jar start -->

	<beans:bean id="resourceDetailsBuilder" class="cn.rainier.nian.model.ResourceDetailsBuilder">
		<beans:constructor-arg name="dataSource" ref="dataSource"/>
	</beans:bean>

    <beans:bean id="resourceDetailsMonitor" class="cn.rainier.nian.model.ResourceDetailsMonitor" autowire="byType">
    	<beans:property name="resourceDetailsBuilder" ref="resourceDetailsBuilder"/>
    	<beans:property name="accessDecisionManager" ref="aclDecisionManager"/>
    </beans:bean>
    <!-- 引入auth_core.jar start -->



     <beans:bean id="aclDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
   		<beans:property name="allowIfAllAbstainDecisions" value="false"/>
   		<beans:property name="decisionVoters">
   			<beans:list>
   					<beans:ref local="authenticatedVoter"/>
   					<beans:ref local="roleVoter"/>
   			</beans:list>
   		</beans:property>
   </beans:bean>

    <!-- 配置认证管理器 -->
    <authentication-manager alias="autheticationManager">
   		<authentication-provider user-service-ref="userService">
   			<password-encoder hash="md5"/>
   		</authentication-provider>
    </authentication-manager>

    <beans:bean id="authenticationUserDetailsService" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
		<beans:property name="userDetailsService">
			<beans:ref bean="userService"/>
		</beans:property>
	</beans:bean>

   <!-- ++++++++++++++Method security!@++++++++++++ -->
	<beans:bean class="org.springframework.security.access.prepost.PostInvocationAdviceProvider" id="postAdviceProvider">
		<beans:constructor-arg ref="exprPostInvocationAdvice"/>
	</beans:bean>
	<beans:bean class="org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice" id="exprPostInvocationAdvice">
		<beans:constructor-arg ref="methodExprHandler"/>
	</beans:bean>
	<beans:bean class="org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource" id="jsr250MetadataSource"/>
	<beans:bean class="org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource" id="securedMetadataSource"/>
    <beans:bean class="org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource" id="prePostMetadataSource">
		<beans:constructor-arg ref="exprAnnotationAttrFactory"/>
	</beans:bean>
	<beans:bean class="org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory" id="exprAnnotationAttrFactory">
		<beans:constructor-arg ref="methodExprHandler"/>
	</beans:bean>
	<beans:bean class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler" id="methodExprHandler"/>
    <beans:bean id="businessAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <beans:property name="decisionVoters">
			<beans:list>
				<beans:ref local="preAdviceVoter"/>
				<beans:ref local="roleVoter"/>
				<beans:ref local="authenticatedVoter"/>
				<beans:ref local="jsr250Voter"/> <!-- For JSR 250 Method Annotations -->
			</beans:list>
		</beans:property>
    </beans:bean>
    <beans:bean class="org.springframework.security.access.annotation.Jsr250Voter" id="jsr250Voter"/>
    <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter"/>
    <beans:bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter"/>
    <beans:bean class="org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter" id="preAdviceVoter">
		<beans:constructor-arg ref="exprPreInvocationAdvice"/>
	</beans:bean>
	<beans:bean class="org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice" id="exprPreInvocationAdvice">
		<beans:property name="expressionHandler" ref="methodExprHandler"/>
	</beans:bean>

</beans:beans>
